Vercel formato:

export default async function handler(req, res) {
  // código
}
3. Configuração Vercel
Criado vercel.json:

{
  "buildCommand": "npm run build",
  "outputDirectory": "dist/public",
  "functions": {
    "api/*.js": { "maxDuration": 30 }
  },
  "rewrites": [
    {
      "source": "/((?!api|assets|.*\\.).*)$",
      "destination": "/index.html"
    }
  ]
}
🏗️ Build Configuration
1. Estrutura de Build
Frontend: React + Vite → dist/public/
Backend: Express server → dist/index.js
APIs: Serverless functions → api/
2. Scripts de Build
{
  "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist"
}
💳 Integração API PIX (For4Payments)
1. API de Criação PIX (api/create-pix-payment.js)
// Recebe dados do checkout
const { nome, cpf, email, telefone, amount, items } = req.body;
// Monta payload For4Payments
const pixData = {
  customer: {
    name: nome,
    email: email,
    document: cpf.replace(/\D/g, ''),
    phone: telefone.replace(/\D/g, '')
  },
  billing: {
    name: nome,
    address: {
      country: "br",
      state: estado,
      city: cidade,
      zipcode: cep.replace(/\D/g, ''),
      street: logradouro,
      number: numero,
      neighborhood: bairro,
      complement: complemento
    }
  },
  items: items,
  payment: {
    method: "pix"
  }
};
// Chama API For4Payments
const response = await fetch("https://app.for4payments.com.br/api/v1/charge", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "Authorization": process.env.FOR4PAYMENTS_API_KEY
  },
  body: JSON.stringify(pixData)
});
2. Webhook Handler (api/webhook-for4payments.js)
// Recebe notificações de pagamento
const webhookData = req.body;
const eventType = webhookData.event;
const transactionStatus = webhookData.status;
// Processa diferentes tipos de evento
switch(eventType) {
  case 'charge.paid':
    // Pagamento aprovado
    break;
  case 'charge.refunded':
    // Estorno
    break;
}
3. Configuração Automática de Webhook
const webhookData = {
  callbackUrl: `https://${req.headers.host}/api/webhook-for4payments`,
  name: "SaboresDeMinas Webhook",
  onBuyApproved: true,
  onRefound: true,
  onChargeback: true,
  onPixCreated: true
};
🛠️ Correções Implementadas
1. Campo CPF Obrigatório
Problema: Checkout não coletava CPF
Solução: Adicionado campo CPF com validação completa

interface FormData {
  nome: string;
  cpf: string; // ← Adicionado
  telefone: string;
  email: string;
  endereco: Address;
}
2. Validação de CPF
const validateCPF = (cpf: string): boolean => {
  const cleanCPF = cpf.replace(/\D/g, '');
  // Validação completa com dígitos verificadores
};
3. Loop de Redirect
Problema: ERR_TOO_MANY_REDIRECTS
Solução: Trocado redirects por rewrites no vercel.json

4. Tracking TikTok Pixel
Adicionado pixel de conversão no client/index.html:

<script>
ttq.load('D16ED2JC77U8BG0G8KCG');
ttq.page();
</script>
🔗 Fluxo Completo do PIX
Usuário preenche checkout → Nome, CPF, email, telefone, endereço
Frontend valida dados → CPF, email, CEP
Envia para API → POST /api/create-pix-payment
API For4Payments → Gera QR Code e código PIX
Retorna para usuário → QR Code + código copiável
Webhook notifica → Quando pagamento é confirmado
📁 Arquivos Modificados
vercel.json - Configuração de deploy
api/ - 4 functions convertidas do Netlify
client/src/components/Checkout.tsx - Campo CPF adicionado
client/index.html - TikTok Pixel
README.md - Documentação atualizada
.gitignore - Configurado para Vercel
🚀 Resultado Final
✅ Deploy automático no Vercel
✅ APIs PIX funcionais
✅ Webhook configurado automaticamente
✅ CPF obrigatório no checkout
✅ Validação completa dos dados
✅ Tracking TikTok ativo
✅ Zero configuração manual necessária
O projeto agora está 100% otimizado para Vercel com integração PIX completa e funcional!